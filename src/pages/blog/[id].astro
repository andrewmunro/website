---
import { type CollectionEntry, getCollection, render } from 'astro:content'
import BaseLayout from '../../layouts/BaseLayout.astro'
import Button from '../../components/Button.astro'
import FormattedDate from '../../components/FormattedDate.astro'
import PostPreview from '../../components/PostPreview.astro'
import { sortItemsByDateDesc } from '../../utils/data-utils'
import { slugify } from '../../utils/common-utils'

export async function getStaticPaths() {
	const posts = (await getCollection('blog')).sort(sortItemsByDateDesc)
	const postCount = posts.length
	return posts.map((post, index) => ({
		params: { id: post.id },
		props: {
			post,
			prevPost: index + 1 !== postCount ? posts[index + 1] : null,
			nextPost: index !== 0 ? posts[index - 1] : null
		}
	}))
}

type Props = { post: CollectionEntry<'blog'>; prevPost: CollectionEntry<'blog'>; nextPost: CollectionEntry<'blog'> }

const { href } = Astro.url
const { post, prevPost, nextPost } = Astro.props
const { title, publishDate, updatedDate, excerpt, tags = [], seo, repo } = post.data
const { Content } = await render(post)
---

<BaseLayout title={seo?.title ?? title} description={seo?.description ?? excerpt} image={seo?.image} pageType="article" showHeader={false}>
	<article class="mb-16 sm:mb-24">
		<header class="mb-8">
			<h1 class="text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight">{title}</h1>
			<div class="mt-4 text-sm">
				<FormattedDate date={publishDate} />
				{
					updatedDate && (
						<>
							{' '}
							<span>
								(Updated on <FormattedDate date={updatedDate} />)
							</span>
						</>
					)
				}
			</div>
		</header>
		{
			repo && (
				<div class="mb-8 flex flex-wrap gap-4">
					<Button href={repo} target="_blank" rel="noopener noreferrer">
						<svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16" class="mr-2">
							<path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z" />
						</svg>
						View on GitHub
					</Button>
				</div>
			)
		}
		<div class="max-w-none prose sm:prose-lg">
			<Content />
		</div>
		<div class="mt-8 flex flex-wrap items-center gap-6 text-sm justify-between sm:mt-12 sm:text-base">
			{
				tags.length > 0 && (
					<div class="flex flex-wrap gap-x-5 gap-y-1 text-sm">
						{tags.map(tag => (
							<a class="text-main hover:underline" href={`/tags/${slugify(tag)}`}>
								#{tag}
							</a>
						))}
					</div>
				)
			}
			<Button class="copy-url-button" aria-label="Copy link" data-url={href} data-tooltip-default="Copy link" data-tooltip-success="Copied">Share</Button>
		</div>
	</article>
	{
		(prevPost || nextPost) && (
			<div class="my-16 sm:my-24">
				<h2 class="mb-12 text-xl font-serif italic sm:mb-16 sm:text-2xl">Read Next</h2>
				{nextPost && <PostPreview post={nextPost} class="mb-10 sm:mb-12" headingLevel="h3" />}
				{prevPost && <PostPreview post={prevPost} class="mb-10 sm:mb-12" headingLevel="h3" />}
			</div>
		)
	}
</BaseLayout>

<script>
	document.addEventListener('astro:page-load', () => {
		const copyUrlButton = document.querySelector('.copy-url-button') as HTMLButtonElement
		copyUrlButton?.addEventListener('click', async () => {
			await copyUrl(copyUrlButton)
		})

		async function copyUrl(button: HTMLButtonElement) {
			let url = button.getAttribute('data-url') || ''
			let label = button.innerText

			await navigator.clipboard.writeText(url)

			button.innerText = 'Copied'

			setTimeout(() => {
				button.innerText = label
			}, 2500)
		}
	})
</script>
